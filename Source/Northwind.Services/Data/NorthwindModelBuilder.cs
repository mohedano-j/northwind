//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.5.</auto-generated>
//------------------------------------------------------------------------------
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Northwind.Services.Data
{
	/// <summary>Model builder class for code first development.</summary>
	public partial class NorthwindModelBuilder
	{
		/// <summary>Builds the model defined in this class with the modelbuilder specified. Called from the generated DbContext</summary>
		/// <param name="modelBuilder">The model builder to build the model with.</param>
		public virtual void BuildModel(ModelBuilder modelBuilder)
		{
			modelBuilder.HasDefaultSchema("dbo");
			MapCategory(modelBuilder.Entity<Category>());
			MapCustomer(modelBuilder.Entity<Customer>());
			MapCustomerCustomerDemo(modelBuilder.Entity<CustomerCustomerDemo>());
			MapCustomerDemographic(modelBuilder.Entity<CustomerDemographic>());
			MapEmployee(modelBuilder.Entity<Employee>());
			MapEmployeeTerritory(modelBuilder.Entity<EmployeeTerritory>());
			MapOrder(modelBuilder.Entity<Order>());
			MapOrderDetail(modelBuilder.Entity<OrderDetail>());
			MapProduct(modelBuilder.Entity<Product>());
			MapRegion(modelBuilder.Entity<Region>());
			MapShipper(modelBuilder.Entity<Shipper>());
			MapSupplier(modelBuilder.Entity<Supplier>());
			MapTerritory(modelBuilder.Entity<Territory>());
		}

		/// <summary>Defines the mapping information for the entity 'Category'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapCategory(EntityTypeBuilder<Category> config)
		{
			config.ToTable("Categories");
			config.HasKey(t => t.CategoryId);
			config.Property(t => t.CategoryId).HasColumnName("CategoryID").ValueGeneratedOnAdd();
			config.Property(t => t.CategoryName).HasMaxLength(15).IsRequired();
			config.Property(t => t.Description).HasMaxLength(1073741823);
			config.Property(t => t.Picture);
        }

		/// <summary>Defines the mapping information for the entity 'Customer'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapCustomer(EntityTypeBuilder<Customer> config)
		{
			config.ToTable("Customers");
			config.HasKey(t => t.CustomerId);
			config.Property(t => t.CustomerId).HasColumnName("CustomerID").HasMaxLength(5);
			config.Property(t => t.CompanyName).HasMaxLength(40).IsRequired();
			config.Property(t => t.ContactName).HasMaxLength(30);
			config.Property(t => t.ContactTitle).HasMaxLength(30);
			config.Property(t => t.Address).HasMaxLength(60);
			config.Property(t => t.City).HasMaxLength(15);
			config.Property(t => t.Region).HasMaxLength(15);
			config.Property(t => t.PostalCode).HasMaxLength(10);
			config.Property(t => t.Country).HasMaxLength(15);
			config.Property(t => t.Phone).HasMaxLength(24);
			config.Property(t => t.Fax).HasMaxLength(24);
		}

		/// <summary>Defines the mapping information for the entity 'CustomerCustomerDemo'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapCustomerCustomerDemo(EntityTypeBuilder<CustomerCustomerDemo> config)
		{
			config.ToTable("CustomerCustomerDemo");
			config.HasKey(t => new { t.CustomerId, t.CustomerTypeId });
			config.Property(t => t.CustomerId).HasColumnName("CustomerID").HasMaxLength(5);
			config.Property(t => t.CustomerTypeId).HasColumnName("CustomerTypeID").HasMaxLength(10);
			config.HasOne(t => t.Customer).WithMany(t => t.CustomerCustomerDemos).HasForeignKey(t => t.CustomerId);
			config.HasOne(t => t.CustomerDemographic).WithMany(t => t.CustomerCustomerDemos).HasForeignKey(t => t.CustomerTypeId);
		}

		/// <summary>Defines the mapping information for the entity 'CustomerDemographic'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapCustomerDemographic(EntityTypeBuilder<CustomerDemographic> config)
		{
			config.ToTable("CustomerDemographics");
			config.HasKey(t => t.CustomerTypeId);
			config.Property(t => t.CustomerTypeId).HasColumnName("CustomerTypeID").HasMaxLength(10);
			config.Property(t => t.CustomerDesc).HasMaxLength(1073741823);
		}

		/// <summary>Defines the mapping information for the entity 'Employee'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapEmployee(EntityTypeBuilder<Employee> config)
		{
			config.ToTable("Employees");
			config.HasKey(t => t.EmployeeId);
			config.Property(t => t.EmployeeId).HasColumnName("EmployeeID").ValueGeneratedOnAdd();
			config.Property(t => t.LastName).HasMaxLength(20).IsRequired();
			config.Property(t => t.FirstName).HasMaxLength(10).IsRequired();
			config.Property(t => t.Title).HasMaxLength(30);
			config.Property(t => t.TitleOfCourtesy).HasMaxLength(25);
			config.Property(t => t.BirthDate);
			config.Property(t => t.HireDate);
			config.Property(t => t.Address).HasMaxLength(60);
			config.Property(t => t.City).HasMaxLength(15);
			config.Property(t => t.Region).HasMaxLength(15);
			config.Property(t => t.PostalCode).HasMaxLength(10);
			config.Property(t => t.Country).HasMaxLength(15);
			config.Property(t => t.HomePhone).HasMaxLength(24);
			config.Property(t => t.Extension).HasMaxLength(4);
			config.Property(t => t.Photo);
			config.Property(t => t.Notes).HasMaxLength(1073741823);
			config.Property(t => t.ReportsTo);
			config.Property(t => t.PhotoPath).HasMaxLength(255);
		}

		/// <summary>Defines the mapping information for the entity 'EmployeeTerritory'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapEmployeeTerritory(EntityTypeBuilder<EmployeeTerritory> config)
		{
			config.ToTable("EmployeeTerritories");
			config.HasKey(t => new { t.EmployeeId, t.TerritoryId });
			config.Property(t => t.EmployeeId).HasColumnName("EmployeeID");
			config.Property(t => t.TerritoryId).HasColumnName("TerritoryID").HasMaxLength(20);
			config.HasOne(t => t.Employee).WithMany(t => t.EmployeeTerritories).HasForeignKey(t => t.EmployeeId);
			config.HasOne(t => t.Territory).WithMany(t => t.EmployeeTerritories).HasForeignKey(t => t.TerritoryId);
		}

		/// <summary>Defines the mapping information for the entity 'Order'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapOrder(EntityTypeBuilder<Order> config)
		{
			config.ToTable("Orders");
			config.HasKey(t => t.OrderId);
			config.Property(t => t.OrderId).HasColumnName("OrderID").ValueGeneratedOnAdd();
			config.Property(t => t.CustomerId).HasColumnName("CustomerID").HasMaxLength(5);
			config.Property(t => t.EmployeeId).HasColumnName("EmployeeID");
			config.Property(t => t.OrderDate);
			config.Property(t => t.RequiredDate);
			config.Property(t => t.ShippedDate);
			config.Property(t => t.ShipVia);
			config.Property(t => t.Freight);
			config.Property(t => t.ShipName).HasMaxLength(40);
			config.Property(t => t.ShipAddress).HasMaxLength(60);
			config.Property(t => t.ShipCity).HasMaxLength(15);
			config.Property(t => t.ShipRegion).HasMaxLength(15);
			config.Property(t => t.ShipPostalCode).HasMaxLength(10);
			config.Property(t => t.ShipCountry).HasMaxLength(15);
			config.HasOne(t => t.Customer).WithMany(t => t.Orders).HasForeignKey(t => t.CustomerId);
			config.HasOne(t => t.Employee).WithMany(t => t.Orders).HasForeignKey(t => t.EmployeeId);
			config.HasOne(t => t.Shipper).WithMany(t => t.Orders).HasForeignKey(t => t.ShipVia);
		}

		/// <summary>Defines the mapping information for the entity 'OrderDetail'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapOrderDetail(EntityTypeBuilder<OrderDetail> config)
		{
			config.ToTable("Order Details");
			config.HasKey(t => new { t.OrderId, t.ProductId });
			config.Property(t => t.OrderId).HasColumnName("OrderID");
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.UnitPrice);
			config.Property(t => t.Quantity);
			config.Property(t => t.Discount);
			config.HasOne(t => t.Order).WithMany(t => t.OrderDetails).HasForeignKey(t => t.OrderId);
			config.HasOne(t => t.Product).WithMany(t => t.OrderDetails).HasForeignKey(t => t.ProductId);
		}

		/// <summary>Defines the mapping information for the entity 'Product'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProduct(EntityTypeBuilder<Product> config)
		{
			config.ToTable("Products");
			config.HasKey(t => t.ProductId);
			config.Property(t => t.ProductId).HasColumnName("ProductID").ValueGeneratedOnAdd();
			config.Property(t => t.ProductName).HasMaxLength(40).IsRequired();
			config.Property(t => t.SupplierId).HasColumnName("SupplierID");
			config.Property(t => t.CategoryId).HasColumnName("CategoryID");
			config.Property(t => t.QuantityPerUnit).HasMaxLength(20);
			config.Property(t => t.UnitPrice);
			config.Property(t => t.UnitsInStock);
			config.Property(t => t.UnitsOnOrder);
			config.Property(t => t.ReorderLevel);
			config.Property(t => t.Discontinued);
			config.HasOne(t => t.Category).WithMany(t => t.Products).HasForeignKey(t => t.CategoryId);
			config.HasOne(t => t.Supplier).WithMany(t => t.Products).HasForeignKey(t => t.SupplierId);
		}

		/// <summary>Defines the mapping information for the entity 'Region'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapRegion(EntityTypeBuilder<Region> config)
		{
			config.ToTable("Region");
			config.HasKey(t => t.RegionId);
			config.Property(t => t.RegionId).HasColumnName("RegionID");
			config.Property(t => t.RegionDescription).HasMaxLength(50).IsRequired();
		}

		/// <summary>Defines the mapping information for the entity 'Shipper'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapShipper(EntityTypeBuilder<Shipper> config)
		{
			config.ToTable("Shippers");
			config.HasKey(t => t.ShipperId);
			config.Property(t => t.ShipperId).HasColumnName("ShipperID").ValueGeneratedOnAdd();
			config.Property(t => t.CompanyName).HasMaxLength(40).IsRequired();
			config.Property(t => t.Phone).HasMaxLength(24);
		}

		/// <summary>Defines the mapping information for the entity 'Supplier'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapSupplier(EntityTypeBuilder<Supplier> config)
		{
			config.ToTable("Suppliers");
			config.HasKey(t => t.SupplierId);
			config.Property(t => t.SupplierId).HasColumnName("SupplierID").ValueGeneratedOnAdd();
			config.Property(t => t.CompanyName).HasMaxLength(40).IsRequired();
			config.Property(t => t.ContactName).HasMaxLength(30);
			config.Property(t => t.ContactTitle).HasMaxLength(30);
			config.Property(t => t.Address).HasMaxLength(60);
			config.Property(t => t.City).HasMaxLength(15);
			config.Property(t => t.Region).HasMaxLength(15);
			config.Property(t => t.PostalCode).HasMaxLength(10);
			config.Property(t => t.Country).HasMaxLength(15);
			config.Property(t => t.Phone).HasMaxLength(24);
			config.Property(t => t.Fax).HasMaxLength(24);
			config.Property(t => t.HomePage).HasMaxLength(1073741823);
		}

		/// <summary>Defines the mapping information for the entity 'Territory'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapTerritory(EntityTypeBuilder<Territory> config)
		{
			config.ToTable("Territories");
			config.HasKey(t => t.TerritoryId);
			config.Property(t => t.TerritoryId).HasColumnName("TerritoryID").HasMaxLength(20);
			config.Property(t => t.TerritoryDescription).HasMaxLength(50).IsRequired();
			config.Property(t => t.RegionId).HasColumnName("RegionID");
			config.HasOne(t => t.Region).WithMany(t => t.Territories).HasForeignKey(t => t.RegionId);
		}
	}


	/// <summary>Extensions class for extension methods used in the model builder code</summary>
	internal static partial class NorthwindModelBuilderExtensions
	{
        private static readonly string READONLY_ANNOTATION = "custom:readonly";

		/// <summary>Extension method which is used by the context class to determine whether an entity is readonly</summary>
		/// <typeparam name="TEntity">The type of the entity.</typeparam>
		/// <param name="builder">The entity type builder object to augment.</param>
		/// <returns>the passed in entity type builder</returns>
		internal static EntityTypeBuilder<TEntity> IsReadOnly<TEntity>(this EntityTypeBuilder<TEntity> builder)
			where TEntity : class
		{
			builder.HasAnnotation(READONLY_ANNOTATION, true);
			return builder;
		}
		
		/// <summary>Determines whether the passed in entity type has the readonly annotation set.
		/// </summary>
		/// <param name="entity">The entity type to check.</param>
		/// <returns>true if the entity type is marked as read-only, false otherwise</returns>
		public static bool IsReadOnly(this IEntityType entity)
		{
			var annotation = entity.FindAnnotation(READONLY_ANNOTATION);
			return annotation != null && (bool)annotation.Value;
		}
	}
}

