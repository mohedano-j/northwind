//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.5.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace Northwind.Services.Data
{
	/// <summary>Class which represents the DataContext for the project / group 'Northwind'</summary>
	public partial class NorthwindDataContext : DbContext
	{
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            IConfigurationRoot configuration = new ConfigurationBuilder()
                  .SetBasePath(Directory.GetCurrentDirectory())
                  .AddJsonFile("appsettings.json")
                  .Build();

            var connectionString = configuration.GetConnectionString("NorthwindConnection");

            optionsBuilder
                .UseSqlServer(connectionString, providerOptions => providerOptions.CommandTimeout(60))
                .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);
        }

        partial void OnModelCreatingComplete();
	
		/// <summary>Saves all changes made in this context to the database.</summary>
		/// <returns>The number of state entries written to the database.</returns>
		/// <remarks>This method will automatically call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
		/// changes to entity instances before saving to the underlying database. This can be disabled via <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" /></remarks>
		public override int SaveChanges()
		{
			var namesOfChangedReadOnlyEntities = this.ChangeTracker.Entries().Where(e => e.Metadata.IsReadOnly() && e.State != EntityState.Unchanged).Select(e => e.Metadata.Name).Distinct().ToList();
			if(namesOfChangedReadOnlyEntities.Any())
			{
				throw new InvalidOperationException($"Attempted to save the following read-only entitie(s): {string.Join(",", namesOfChangedReadOnlyEntities)}");
			}
			return base.SaveChanges();
		}
	
		/// <summary>Override this method to further configure the model that was discovered by convention from the entity types
		/// exposed in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on your derived context. The resulting model may be cached
		/// and re-used for subsequent instances of your derived context.</summary>
		/// <param name="modelBuilder">The builder being used to construct the model for this context. Databases (and other extensions) typically
		/// define extension methods on this object that allow you to configure aspects of the model that are specific
		/// to a given database.</param>
		/// <remarks>If a model is explicitly set on the options for this context (via <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" />)
		/// then this method will not be run.</remarks>
		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
			new NorthwindModelBuilder().BuildModel(modelBuilder);
			OnModelCreatingComplete();
		}



		/// <summary>Gets an object query for the entity set 'Category', containing entity type 'Category'</summary>
		public DbSet<Category> Categories { get; set; } 
		/// <summary>Gets an object query for the entity set 'Customer', containing entity type 'Customer'</summary>
		public DbSet<Customer> Customers { get; set; } 
		/// <summary>Gets an object query for the entity set 'CustomerCustomerDemo', containing entity type 'CustomerCustomerDemo'</summary>
		public DbSet<CustomerCustomerDemo> CustomerCustomerDemos { get; set; } 
		/// <summary>Gets an object query for the entity set 'CustomerDemographic', containing entity type 'CustomerDemographic'</summary>
		public DbSet<CustomerDemographic> CustomerDemographics { get; set; } 
		/// <summary>Gets an object query for the entity set 'Employee', containing entity type 'Employee'</summary>
		public DbSet<Employee> Employees { get; set; } 
		/// <summary>Gets an object query for the entity set 'EmployeeTerritory', containing entity type 'EmployeeTerritory'</summary>
		public DbSet<EmployeeTerritory> EmployeeTerritories { get; set; } 
		/// <summary>Gets an object query for the entity set 'Order', containing entity type 'Order'</summary>
		public DbSet<Order> Orders { get; set; } 
		/// <summary>Gets an object query for the entity set 'OrderDetail', containing entity type 'OrderDetail'</summary>
		public DbSet<OrderDetail> OrderDetails { get; set; } 
		/// <summary>Gets an object query for the entity set 'Product', containing entity type 'Product'</summary>
		public DbSet<Product> Products { get; set; } 
		/// <summary>Gets an object query for the entity set 'Region', containing entity type 'Region'</summary>
		public DbSet<Region> Regions { get; set; } 
		/// <summary>Gets an object query for the entity set 'Shipper', containing entity type 'Shipper'</summary>
		public DbSet<Shipper> Shippers { get; set; } 
		/// <summary>Gets an object query for the entity set 'Supplier', containing entity type 'Supplier'</summary>
		public DbSet<Supplier> Suppliers { get; set; } 
		/// <summary>Gets an object query for the entity set 'Territory', containing entity type 'Territory'</summary>
		public DbSet<Territory> Territories { get; set; } 
}
}
